{"version":3,"file":"static/js/register-page.36539b03.chunk.js","mappings":"4NA4DA,UArDqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaG,WACpBE,SAAUL,EAAAA,KAAaG,aAgBnBG,GAAkBC,EAAAA,EAAAA,MAClBC,GAAeD,EAAAA,EAAAA,MACfE,GAAcF,EAAAA,EAAAA,MAEpB,OACE,4BACE,sCACA,SAAC,KAAD,CACEG,cArBgB,CACpBR,KAAM,GACNE,MAAO,GACPC,SAAU,IAmBNM,iBAAkBZ,EAClBa,SAjBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAEtBZ,EAA0BW,EAA1BX,KAAME,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SACrBR,GAASkB,EAAAA,EAAAA,IAAS,CAAEb,KAAAA,EAAME,MAAAA,EAAOC,SAAAA,KACjCS,KAUE,UAKE,UAAC,KAAD,CAAME,aAAa,MAAnB,WACE,kBAAOC,QAASR,EAAhB,mBACA,SAAC,KAAD,CAAOS,KAAK,OAAOhB,KAAK,OAAOiB,GAAIV,KACnC,SAAC,KAAD,CAAcP,KAAK,OAAOkB,UAAU,SAEpC,kBAAOH,QAAST,EAAhB,qBACA,SAAC,KAAD,CAAOU,KAAK,QAAQhB,KAAK,QAAQiB,GAAIX,KACrC,SAAC,KAAD,CAAcN,KAAK,SAASkB,UAAU,SAEtC,kBAAOH,QAASX,EAAhB,uBACA,SAAC,KAAD,CAAOY,KAAK,WAAWhB,KAAK,WAAWiB,GAAIb,KAC3C,SAAC,KAAD,CAAcJ,KAAK,WAAWkB,UAAU,SAExC,mBAAQF,KAAK,SAAb","sources":["views/RegisterView.jsx"],"sourcesContent":["import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().required(),\n    password: yup.string().required(),\n  });\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    // event.preventDefault();\n    const { name, email, password } = values;\n    dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  const passwordInputId = nanoid();\n  const emailInputId = nanoid();\n  const nameInputId = nanoid();\n\n  return (\n    <div>\n      <h2>Register</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <label htmlFor={nameInputId}>Name</label>\n          <Field type=\"name\" name=\"name\" id={nameInputId} />\n          <ErrorMessage name=\"name\" component=\"div\" />\n\n          <label htmlFor={emailInputId}>E-mail</label>\n          <Field type=\"email\" name=\"email\" id={emailInputId} />\n          <ErrorMessage name=\"e-mail\" component=\"div\" />\n\n          <label htmlFor={passwordInputId}>Password</label>\n          <Field type=\"password\" name=\"password\" id={passwordInputId} />\n          <ErrorMessage name=\"password\" component=\"div\" />\n\n          <button type=\"submit\">Register</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["dispatch","useDispatch","schema","yup","shape","name","required","email","password","passwordInputId","nanoid","emailInputId","nameInputId","initialValues","validationSchema","onSubmit","values","resetForm","register","autoComplete","htmlFor","type","id","component"],"sourceRoot":""}